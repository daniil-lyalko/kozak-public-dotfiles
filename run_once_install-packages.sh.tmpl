#!/bin/bash

# ====================
# Safe Package Installation Script
# ====================
# This script safely installs and configures development tools using Homebrew for both macOS and Linux.
# It includes safety checks, version pinning, and graceful error handling.
# 
# Usage: ./install-packages.sh
# ====================

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Configuration - Set to false to skip optional installs
INSTALL_DOCKER=${INSTALL_DOCKER:-true}
INSTALL_TERRAFORM=${INSTALL_TERRAFORM:-true}
INSTALL_OPTIONAL_TOOLS=${INSTALL_OPTIONAL_TOOLS:-true}

# Function to log messages with timestamps
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check command existence
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to safely install package with version check
safe_brew_install() {
    local package="$1"
    local optional="${2:-false}"
    
    if command_exists "$package"; then
        log "$package is already installed, skipping"
        return 0
    fi
    
    if [[ "$optional" == "true" && "$INSTALL_OPTIONAL_TOOLS" != "true" ]]; then
        log "Skipping optional package: $package"
        return 0
    fi
    
    log "Installing $package..."
    if ! brew install "$package"; then
        log "Warning: Failed to install $package"
        return 1
    fi
}

# Function to backup existing config
backup_config() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup="${file}.backup.$(date +%Y%m%d_%H%M%S)"
        log "Backing up existing config: $file -> $backup"
        cp "$file" "$backup"
    fi
}

# ====================
# Homebrew Installation
# ====================
if ! command_exists brew; then
    log "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for Linux
    if [ "$(uname)" = "Linux" ]; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
else
    log "Homebrew is already installed."
fi

# Update Homebrew (but don't upgrade packages automatically)
log "Updating Homebrew formulae..."
brew update

# ====================
# Essential Development Tools
# ====================
log "Installing essential development tools..."

# Core tools that are generally safe to install/update
safe_brew_install "git"
safe_brew_install "curl"
safe_brew_install "ripgrep"
safe_brew_install "tree-sitter"
safe_brew_install "neovim"
safe_brew_install "starship"
safe_brew_install "nvm"
safe_brew_install "tmux"

# Programming languages - pinned to stable versions
safe_brew_install "python3"
safe_brew_install "go"

# Optional tools with user control
if [[ "$INSTALL_DOCKER" == "true" ]]; then
    safe_brew_install "docker" "true"
fi

if [[ "$INSTALL_TERRAFORM" == "true" ]]; then
    safe_brew_install "terraform" "true"
fi

# Cloud/DevOps tools (optional)
safe_brew_install "awscli" "true"
safe_brew_install "infracost" "true"

# ====================
# Shell Configuration
# ====================
log "Configuring shell environment..."

# Install Zsh if not present
if ! command_exists zsh; then
    log "Installing Zsh..."
    safe_brew_install "zsh"
else
    log "Zsh is already installed."
fi

# Install Oh My Zsh only if not present and user hasn't customized
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    log "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
else
    log "Oh My Zsh is already installed."
fi

# Only change default shell if explicitly requested
if [ "${CHANGE_DEFAULT_SHELL:-false}" = "true" ] && [ "$SHELL" != "$(which zsh)" ]; then
    log "Setting Zsh as default shell..."
    if command_exists sudo; then
        sudo chsh -s "$(which zsh)" "$(whoami)" || log "Warning: Failed to change default shell. Run 'chsh -s $(which zsh)' manually if desired."
    else
        log "Warning: Cannot change default shell without sudo. Run 'chsh -s $(which zsh)' manually if desired."
    fi
fi

# ====================
# Platform-Specific Dependencies
# ====================
log "Installing platform-specific dependencies..."

# Install clipboard utilities for TMUX
if grep -q -i "microsoft" /proc/version 2>/dev/null; then
    log "WSL detected - clipboard integration via clip.exe"
elif command_exists apt; then
    log "Installing clipboard utilities for Ubuntu/Debian..."
    if command_exists sudo; then
        sudo apt update && sudo apt install -y xclip xsel || log "Warning: Failed to install clipboard utilities"
    fi
elif command_exists yum; then
    log "Installing clipboard utilities for RHEL/CentOS/AL2..."
    if command_exists sudo; then
        sudo yum install -y xclip xsel || log "Warning: Failed to install clipboard utilities"
    fi
elif [ "$(uname)" = "Darwin" ]; then
    log "macOS detected - using pbcopy/pbpaste"
fi

# ====================
# TMUX Configuration
# ====================
log "Setting up TMUX environment..."

# Install TMUX Plugin Manager
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    log "Installing TMUX Plugin Manager..."
    mkdir -p "$HOME/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm" || log "Warning: Failed to install TPM"
else
    log "TMUX Plugin Manager already installed."
fi

# ====================
# Post-Installation Cleanup
# ====================
log "Cleaning up..."
brew cleanup --prune=7 || log "Warning: Cleanup failed"

# ====================
# Summary and Next Steps
# ====================
log "Installation complete!"

cat << EOF

==============================================
Safe Installation Complete!
==============================================

âœ… Installed Essential Tools:
   - Git, Ripgrep, Neovim, Starship prompt
   - TMUX (Terminal Multiplexer with modern config)
   - NVM (Node Version Manager)
   - Python 3, Go

$(if [[ "$INSTALL_DOCKER" == "true" ]]; then echo "âœ… Docker installed"; fi)
$(if [[ "$INSTALL_TERRAFORM" == "true" ]]; then echo "âœ… Terraform installed"; fi)
âœ… Platform-specific clipboard utilities configured

ðŸ“‹ Manual Steps (if desired):
   1. Install Node.js: source ~/.zshrc && nvm install --lts
   2. Configure Neovim: Launch nvim and install plugins
   3. Install TMUX plugins: tmux and press Ctrl-a + I
   4. Customize shell: Edit ~/.zshrc for personal preferences

ðŸ”§ Configuration Files:
   - Shell: ~/.zshrc (managed by chezmoi)
   - TMUX: ~/.tmux.conf (managed by chezmoi)
   - Git: ~/.gitconfig (managed by chezmoi)
   - Neovim: ~/.config/nvim/ (managed by chezmoi)

ðŸŽ¯ TMUX Quick Start:
   - Start TMUX: tmux
   - Help: Ctrl-a + Ctrl-h (shows keybinding reference)
   - Split panes: Ctrl-a + | (vertical) or Ctrl-a + - (horizontal)
   - Navigate: Ctrl-a + h/j/k/l

For more information: https://github.com/kozakdaniil/kozak-public-dotfiles
==============================================

EOF

log "Restart your terminal to ensure all changes take effect."