# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Add Mason (Neovim LSP/linter/formatter manager) to PATH
export PATH="$HOME/.local/share/nvim/mason/bin:$PATH"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell" # Commented out as we're using Starship

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is slow.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# Source Oh My Zsh
source $ZSH/oh-my-zsh.sh

# User configuration

# Example aliases - Keep generic useful ones
alias v='nvim'
alias vi='nvim'
alias vim='nvim'
alias ll='ls -alF'
alias ..='cd ..'
# Python commands
alias python=python3
alias py=python3
alias pip=pip3

# Virtual environment shortcuts
alias venv='python -m venv'
alias mkvenv='python -m venv venv && source venv/bin/activate'  # Create and activate venv in one command

# Smart Python app runners
alias runpy='python -m'                    # Run Python modules: runpy flask run
alias runflask='python -m flask run'       # Flask development server
alias rundjango='python manage.py runserver'  # Django development server
alias runfastapi='python -m uvicorn main:app --reload'  # FastAPI with auto-reload
alias runstreamlit='python -m streamlit run'  # Streamlit app runner

# Development shortcuts
alias pytest='python -m pytest'
alias pyformat='python -m black . && python -m isort .'  # Format Python code
alias pylint='python -m pylint'
alias mypy='python -m mypy'
alias pip-requirements='pip freeze > requirements.txt'
alias pip-install-dev='pip install -e .'   # Install package in development mode

# Python project utilities
alias pycheck='python -m py_compile'       # Check Python syntax
alias pydoc='python -m pydoc'             # Python documentation
alias pyprofile='python -m cProfile'       # Python profiler
alias pyserver='python -m http.server'     # Simple HTTP server

# ----- chezmoi alias -------
alias ca='chezmoi apply'
alias cz='chezmoi cd'

# Load local aliases if they exist (not committed to dotfiles repo)
if [ -f "$HOME/.zsh_local_aliases" ]; then
    source "$HOME/.zsh_local_aliases"
fi

# ====================
# Help System
# ====================
# Show all custom aliases and functions
alias help='show_help'
alias h='show_help'

show_help() {
    echo "🚀 Custom Commands & Aliases"
    echo "=========================="
    echo ""
    echo "📝 Editor:"
    echo "  v, vi, vim    - Open Neovim"
    echo ""
    echo "📁 Navigation:"
    echo "  ll            - List files with details"
    echo "  ..            - Go up one directory"
    echo ""
    echo "🔧 Chezmoi:"
    echo "  ca            - Apply chezmoi changes"
    echo "  cz            - CD to chezmoi directory"
    echo ""
    echo "🐍 Python:"
    echo "  python, py    - Python 3"
    echo "  pip           - pip3"
    echo "  venv          - Create virtual environment"
    echo "  mkvenv        - Create and activate venv"
    echo ""
    echo "🏃 Python Runners:"
    echo "  runpy         - Run Python modules"
    echo "  runflask      - Run Flask dev server"
    echo "  rundjango     - Run Django dev server"
    echo "  runfastapi    - Run FastAPI with reload"
    echo "  runstreamlit  - Run Streamlit app"
    echo ""
    echo "🛠️  Python Dev Tools:"
    echo "  pytest        - Run tests"
    echo "  pyformat      - Format code (black + isort)"
    echo "  pylint        - Run linter"
    echo "  mypy          - Type checker"
    echo "  pip-requirements - Generate requirements.txt"
    echo "  pip-install-dev  - Install in dev mode"
    echo ""
    echo "🔍 Python Utilities:"
    echo "  pycheck       - Check syntax"
    echo "  pydoc         - Python documentation"
    echo "  pyprofile     - Profile code"
    echo "  pyserver      - Simple HTTP server"
    echo ""
    echo "🤖 AI Tools:"
    echo "  claude        - Claude Code (auto Node v20)"
    echo ""
    echo "📊 JIRA Team Management:"
    echo "  jf            - Quick focus mode (standup)"
    echo "  jira-focus    - Show active work only"
    echo "  jira-status   - Full team status"
    echo "  jira-cleanup  - Find tickets to close"
    echo "  jira-health   - Backlog analysis"
    echo "  jira-intake   - Track new ticket patterns"
    echo "  jira-help     - Setup instructions"
    echo ""
    echo "💡 Type 'alias' to see all aliases"
    echo "💡 Type 'functions' to see all functions"
}

# ====================
# Cross-Platform NVM Setup
# ====================
export NVM_DIR="$HOME/.nvm"

# Try to load NVM from all possible locations (ensure nvm is installed via install-packages.sh)
if [ -s "/opt/homebrew/opt/nvm/nvm.sh" ]; then
    . "/opt/homebrew/opt/nvm/nvm.sh"  # macOS Homebrew (Apple Silicon)
elif [ -s "/usr/local/opt/nvm/nvm.sh" ]; then
    . "/usr/local/opt/nvm/nvm.sh"  # macOS Homebrew (Intel)
elif [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ]; then
    . "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"  # Linux Homebrew
elif [ -s "$NVM_DIR/nvm.sh" ]; then
    . "$NVM_DIR/nvm.sh"  # Linux/WSL2 / Manual Install
fi

# ====================
# Default Node Version
# ====================
# Set Node 20 as default and use it
if command -v nvm &> /dev/null; then
    nvm alias default 20 &>/dev/null 2>&1
    nvm use default &>/dev/null 2>&1 || nvm install 20 &>/dev/null
fi

# ====================
# Node Version Shortcuts
# ====================
alias node14='nvm use 14'
alias node16='nvm use 16'
alias node18='nvm use 18'
alias node20='nvm use 20'
alias node-lts='nvm use --lts'
alias node-latest='nvm use node'

# Load NVM bash completion if available
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# WSL Detection (useful for conditional logic if needed)
if grep -q -i "microsoft" /proc/version 2>/dev/null; then
    export IS_WSL=true
else
    export IS_WSL=false
fi

# Cross-platform Homebrew initialization
if [[ "$(uname)" == "Darwin" ]]; then
    # macOS specific configuration
    eval "$(/opt/homebrew/bin/brew shellenv)"

    # Add pyenv configuration if pyenv is intended to be part of the default setup
    # Ensure pyenv is installed via install-packages.sh if used
    # export PYENV_ROOT="$HOME/.pyenv"
    # [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
    # eval "$(pyenv init -)"

elif [[ "$(uname)" == "Linux" ]]; then
    # Linux/WSL2 specific configuration
    # Check if Homebrew exists before evaluating shellenv
    if [ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
fi

# Example: Add user's local bin to PATH if it exists
if [ -d "$HOME/.local/bin" ]; then
  export PATH="$HOME/.local/bin:$PATH"
fi

# Load Starship prompt (ensure starship is installed via install-packages.sh)
eval "$(starship init zsh)"

